save(df_summary_cea_QALY, file = "../output/df_summary_cea_QALY.rda")
# Rename the rows
rownames(df_summary_cea_QALY)[which(rownames(df_summary_cea_QALY) == "Cost effective")] <- "Is trt cost-effective?"
rownames(df_summary_cea_QALY)[which(rownames(df_summary_cea_QALY) == "Incr effect Rx")] <- "Gain in QALY"
rownames(df_summary_cea_QALY)[which(rownames(df_summary_cea_QALY) == "Incr cost Rx")]   <- "What to pay extra ($/person)?"
rownames(df_summary_cea_QALY)[which(rownames(df_summary_cea_QALY) == "WTP")]            <- "Willigness-to-pay (K$/QALY)"
rownames(df_summary_cea_QALY)[which(rownames(df_summary_cea_QALY) == "Incr NMB")]   <- "Incr NMB (K$)"
# select for reporting only
df_summary_cea_QALY_plot <- df_summary_cea_QALY[, c(which(colnames(df_summary_cea_QALY) %in% l_names$v_names_trt_report))]
colnames(df_summary_cea_QALY_plot) <- remove_date_from_name(colnames(df_summary_cea_QALY_plot))
# Save
save(df_summary_cea_QALY_plot, file = "../output/df_summary_cea_QALY_report.rda")
png("../figures/table_summary_cea_QALY.png", width = 1800, height = 300,bg = "white")
grid.table(df_summary_cea_QALY_plot)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../") # set working directory to the root directory rather than another sub-folder where the RMarkdown file is saved
load(file = "../output/l_pop_evpsi_rct_r.rda")
load(file = "./output/l_pop_evpsi_rct_r.rda")
load(file = "../output/l_pop_evpsi_rct_r.rda")
load(file = "output/l_pop_evpsi_rct_r.rda")
load(file = "../output/l_pop_evpsi_rct_r.rda")
# Clean list
rm(list = ls())
if (!require('pacman')) install.packages('pacman'); library(pacman)
# use this package to conveniently install other packages
p_load("matrixStats", "ggplot2",
"scales",  "reshape2",
"nlme", "mgcv", "BCEA",
"inlabru", "devtools",
"tibble", "tidyverse", "ggpubr",
"rms", "europepmc", "xaringan", "Rmisc",
"fmsb", "remotes", "readxl", "plyr", "stats", "triangle",
"EnvStats", "e1071", "meta","metafor","gridExtra",
"here", "dplyr","ellipse", "ggplot2","lazyeval",
"igraph", "ggraph","knitr", "plyr", "stats", "diagram",
"triangle", "HMDHFDplus", "blscrapeR", "here", "gridExtra", "foreach", "mondate", "parallel", "imguR")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../") # set working directory to the root directory rather than another sub-folder where the RMarkdown file is saved
if (!require('pacman')) install.packages('pacman'); library(pacman)
# use this package to conveniently install other packages
p_load("matrixStats", "ggplot2",
"scales",  "reshape2",
"nlme", "mgcv", "BCEA",
"inlabru", "devtools",
"tibble", "tidyverse", "ggpubr",
"rms", "europepmc", "xaringan", "Rmisc",
"fmsb", "remotes", "readxl", "plyr", "stats", "triangle",
"EnvStats", "e1071", "meta","metafor","gridExtra",
"here", "dplyr","ellipse", "ggplot2","lazyeval",
"igraph", "ggraph","knitr", "plyr", "stats", "diagram",
"triangle", "HMDHFDplus", "blscrapeR", "here", "gridExtra", "foreach", "mondate", "parallel", "imguR")
# install_github("DARTH-git/dampack", force = TRUE) # Uncomment if there is a newer version
# install_github("DARTH-git/darthpack", force = TRUE) # Uncomment if there is a newer version
# install_github("DARTH-git/darthtools", force = TRUE) # Uncomment if there is a newer version #NOTE! requires the newest devtools and R version
# devtools::install_github("collectivemedia/tictoc") # install to measure the time
p_load_gh("DARTH-git/dampack") # coding framework to construct model-based cost-effectiveness analysis in R
p_load_gh("DARTH-git/darthpack") # package for analyzing and visualizing the health economic outputs of mathematical models
p_load_gh("DARTH-git/darthtools") # a R package that contains tools frequently used by the DARTH workgroup
p_load_gh("collectivemedia/tictoc") # package to measure the time of an analysis
#source("../functions/00_general_functions.R")       # general functions
# General functions are now in darthtools
source("../functions/00_general_mycolour.R")
source("../functions/00_general_format_table_function.R")
source("../functions/01_model_input_data_hospitalization_functions.R") # functions for the model
source("../functions/01_model_inputs_functions.R")  # functions for the data
source("../functions/02_decision_model_functions.R") # functions for model structure & to run the model
source("../functions/02_decision_model_plot_functions.R") # plot functions
source("../functions/02_decision_model_calcout_functions.R") # the entire model
source("../functions/05a_probabilistic_analysis_functions.R")   # functions for the PSA
source("../functions/06_VOI_functions.R")   # functions for the VOI
source("../functions/06_VOI_ENB_functions.R")
#### Load data ####
param       <- data.frame(readxl::read_xlsx("../data/parameters_25.xlsx", sheet = "cohort")) # Parameters relating to the study population
param_trt   <- data.frame(readxl::read_xlsx("../data/parameters_25.xlsx", sheet = "Rx")) # Parameters relating to treatment
df_r_HD     <- read.csv("../data/USA_Mx_1x1_2017.csv", sep = ",")
load("../data/param_hosp.rda") # Load hospitalization data IHME
df_trials_NMA <- data.frame(readxl::read_xls("../data/data_files_upload_covid_nma_database_2021-03-03.xls"))
# Download latest file from http://www.healthdata.org/covid/data-downloads and save in data folder. Last update: May 5 2021- > NB: dataset 30 april did not contain mean admission, dataset from april 23
# Dataset for hospitalization: Reference_hospitalization_all_locs.csv [current projection]
# NB: New datasets for vaccination have been added, but do not yet contain admission number adjustments
param_hosp  <- read.csv("../data/reference_hospitalization_all_locs.csv", sep = ",") # Parameters relating to treatment
save(param_hosp, file = "../data/param_hosp.rda" )
saveRDS(param_hosp, file = "../data/param_hosp.rds" )
# use the function to remove the values without a unit
param     <- remove_param_without_unit(df_param = param)
param_trt <- remove_param_without_unit(df_param = param_trt)
# This copy is required as the base code edits param according to the required treatment, whether the PSA uses the original input data again.
param_psa_input     <- param
param_trt_psa_input <- param_trt
# Use latest IHME dataset
df_hosp_usa <- modify_df_hospitalization(df_hospitalisation = param_hosp, country = "United States of America")
# Mean daily hospital and ICU admissions
summary(df_hosp_usa$new_ICU_mean ) # ICU - no data for the USA
summary(param_hosp$newICU_mean)    # ICU - check other locations - there are values for other countries, so US data cannot be used
# Plot projected number of hospitalizations USA over time
df_hosp_usa$date <- as.Date(df_hosp_usa$date)
# Plot projected hospitalizations including upper and lower bound USA
projected_hosp <- ggplot() +
geom_path(data = df_hosp_usa, aes(x = date, y = admis_mean, group = location_name), color = "black") +
geom_path(data = df_hosp_usa, aes(x = date, y = admis_lower, group = location_name), color = "blue", linetype = "dotted") +
geom_path(data = df_hosp_usa, aes(x = date, y = admis_upper, group = location_name), color = "blue", linetype = "dotted") +
labs( x = "date", y = "Number of hospitalizations per day", title = "New hospitalizations per day")   +
scale_x_date(date_breaks = "1 month", labels = date_format("%m-%Y")) +
ggsave(path = here("../figures"), filename = paste("Projected number of new hospitalizations per day IHME.png", sep =""))
# Print plot
projected_hosp
# Check from and  until which date the projections are carried out
head(df_hosp_usa$date) # From 2020-02-04 onward
tail(df_hosp_usa$date) #
# Sum total hospitalizations
sum(df_hosp_usa$admis_mean) # Total hospitalizations as projected over total period
# Specify start and end count
startcount       <- "2021-03-03" #Sys.Date()
endcount         <- max(df_hosp_usa$date)  # The latest data with predictions
startcount_trial <- startcount
endcount_trial   <- as.Date(mondate(startcount) + 3)  #Start in 1 month, as future patients + current patients are added
l_hosp_trial <- calculate_hospitalizations(df_hospitalisation = df_hosp_usa,
startcount = startcount_trial,
endcount = endcount_trial) # 1 month
l_hosp       <- calculate_hospitalizations(df_hospitalisation = df_hosp_usa,
startcount = endcount_trial, # continue from the end of trail
endcount   = endcount)
# Add new numbers into param
param_trt$Med[which(param_trt$Param == "n_H_year")]       <- l_hosp$pop_mean
param_trt$Lo_alpha[which(param_trt$Param == "n_H_year")]  <- l_hosp$pop_lower
param_trt$Hi_beta[which(param_trt$Param == "n_H_year")]   <- l_hosp$pop_upper
param_trt$Med[which(param_trt$Param == "n_H_trial")]       <- l_hosp_trial$pop_mean
param_trt$Lo_alpha[which(param_trt$Param == "n_H_trial")]  <- l_hosp_trial$pop_lower
param_trt$Hi_beta[which(param_trt$Param == "n_H_trial")]   <- l_hosp_trial$pop_upper
# See whether overwriting was successful
param_trt[param_trt$Param == "n_H_year", ]
param_trt[param_trt$Param == "n_H_trial", ]
# This copy is required as the base code edits param according to the required treatment, whether the PSA uses the original input data again.
param_psa_input <- param
param_trt_psa_input <- param_trt
l_names <- list()
l_names$names_notrt <- names_notrt<- sort(unique(param$Treatment))  # subtract the treatment names and order them in alphabetic order
l_names$names_treatment <- names_treatment<- sort(unique(param_trt$Treatment))  # subtract the treatment names and order them in alphabetic order
l_names$names_trt <- names_trt <- v_names_trt <- names_treatment[-(names_treatment == "All")] # names of the treatments without the parameters that are applicable for all
save(v_names_trt, file = "../output/v_names_trt.rda")
# The county data is not used in the analysis at this moment in time
l_names$names_countries     <- names_countries <- sort(unique(param$Country))  # select the country names
l_names$names_countries_trt <- names_countries_trt <- sort(unique(param_trt$Country)) # select the country names
# Select the parameters of interest for the reporting
# Please note -> needs to be update if the order changes
#l_names$v_names_trt_report <- v_names_trt[c(1:5, 8, 9)]  # Select values when the excel has more treatments than needed
l_names$v_names_trt_report <- v_names_trt
v_names_trt_report_full <- l_names$v_names_trt_report
l_names$v_names_trt_report_full <- as.vector(sapply(l_names$v_names_trt_report, remove_date_from_name))
#l_names$v_names_trt_report_full[[7]] <- substr(l_names$v_names_trt_report_full[[7]], start=1, stop = 11)
save(l_names, file = "../output/l_names.rda") # save the list with all the names
# Get the median parameter values from the usual care/cohort into the R environment
l_param     <- split_df_to_lists_mean_param(df_param = param)
l_param_all <- split_df_to_lists_mean_param(df_param = param_trt) # run the function
# Merge all the parameters from one specific treatment/to all the drug specific lists.
# For example some treatment specific values are relevant for all drugs. This is indicated by the # "All" meaning apply to all.
l_param_trt <- combine_lists(list = l_param_all, combine = "All")
## Best to all add
for (n in names(l_param_trt)){
l_param_trt[[n]] <- c(l_param_trt[[n]], l_param$usual_care)
}
for(n in names(l_param_trt)){
l_list_f <- c()
l_list_f <- l_param_trt[[n]]
# Code to select type of parameter
v_names_param <- names(l_param_trt[[n]])
v_trt_type_name <- c("rr_D_Trt_timespan1",
"rd_D_Trt_timespan1",
"or_D_Trt_timespan1",
"hr_D_Trt_timespan1")
v_trt_type <- c("RR",
"RD",
"OR",
"HR")
# Make a dateframe
df_trt_type <- as.data.frame(cbind(v_trt_type_name, v_trt_type))
# select the full name of the treatment type
name <- v_names_param[ which(v_names_param %in% v_trt_type_name)]
# match it with the corresponding treatment type
trt_effect <- df_trt_type$v_trt_type[df_trt_type$v_trt_type_name == name] #
vent <- FALSE  # make a variable that by default is FALSE
if(trt_effect == "RR" & !is.null(l_list_f$rr_D_Trt_timespan1_vent)){
vent <- TRUE # if  we have information about ventilation, overwrite
}
if(trt_effect == "RD" & !is.null(l_list_f$rd_D_Trt_timespan1_vent)){
vent <- TRUE
}
if(trt_effect == "OR" & !is.null(l_list_f$or_D_Trt_timespan1_vent)){
vent <- TRUE
}
if(trt_effect == "HR" & !is.null(l_list_f$hr_D_Trt_timespan1_vent)){
vent <- TRUE
}
l_param_trt[[n]]$trt_effect <- trt_effect
l_param_trt[[n]]$vent       <- vent
} #close the loop
l_input_general <- list(
# Strategy names
v_names_str      = c("notrt",      "trt"), # @EK: make SoC and  ?
v_names_str_full = c("Usual Care", "Treatment"), # Standard of care vs treatment
# Markov model parameters
n_age_max = 120  ,            # max. age for life time horizon analysis
n_DpC   = 73 ,                # days per cycle
n_DpY   = 365  ,              # days per year, more correct? 365.25
v_names_states      = c("H", "R_H", "R_IC", "D"),  # the 4 states of the model: Hospitalized, Recovered from Hospital ward (R_H), Recovered from ICU (R_IC) Dead (D)
v_names_states_full = c("Hospitalized", "Recovered from Hospital ward", "Recovered from ICU", "Dead") ,
v_s_init = c("H" = 1, "R_H" = 0, "R_IC" = 0, "D" = 0), # Initial state distribution
# Effects (alive = 1, dead = 0)
e_H    = 1,
e_I    = 1,
e_R    = 1,
e_R_IC = 1,
e_R_H  = 1,
e_D    = 0,
# Discounting factor
# Equal discount of costs and QALYs of 3%
d_e = 0.03,
d_c = 0.03
)
# load the parameters from usual care to the environment
# Those treatment specific will we used in a loop
ls()
list2env(l_input_general, globalenv())     # cohort
ls()
# Combine the list with general input with all the drug specific info
for (n in names(l_param_trt)){
l_input_general$df_r_HD <- df_r_HD # Add the df with the mortality rate to the general input
l_param_trt[[n]] <- c(l_param_trt[[n]], l_input_general)
}
l_param_trt_basecase <- l_param_trt
save(l_param_trt_basecase, file = "../output/l_param_trt_basecase.rda" )
save(l_input_general, file = "../output/l_input_general.rda")
# make two lists to store the ce and
l_out_ce_base <- l_out_ce_base_return_all <- list()
for (n in names(l_param_trt)){
# save all the items
l_out_ce_base_return_all[[n]] <- calculate_cea_output_VOI_COVID(l_list = l_param_trt[[n]], n_wtp = l_param_trt[[n]]$wtp, return_all = TRUE,  verbose = FALSE)
l_out_ce_base[[n]] <- l_out_ce_base_return_all[[n]]$df_ce_combined
}
# @EK maybe really all in the list
# Extract some data to the global environment
l_input_general <- estimate_input_general(l_param_trt[[1]])
l_input_general
ls()
list2env(l_input_general, globalenv())     # cohort
ls()
# Make a matrix for the structure of the model
m_P_diag2 <- with(l_out_ce_base_return_all[[1]]$l_param_trt_f, matrix(0, nrow = n_states, ncol = n_states, dimnames = list(v_names_states, v_names_states)))
m_P_diag2["H","R_H"]  = ""
m_P_diag2["H","R_IC"]  = ""
m_P_diag2["H","D"]  = ""
m_P_diag2["R_IC","R_IC"]  = ""
m_P_diag2["R_H","R_H"]  = ""
m_P_diag2["R_IC","D"]  = ""
m_P_diag2["R_H","D"]  = ""
m_P_diag2["D","D"]  = ""
# The layout of the state-bubbles
layout.fig2 <- c(1, 2, 1)
# plot the final graph
plotmat(t(m_P_diag2), t(layout.fig2), self.cex = 0.4, curve = 0, arr.pos = 0.7,
latex = T, arr.type = "curved", relsize = 0.9, box.prop = 0.7,
cex = 0.6, box.cex = 0.9, lwd = 1)
# this code is a loop to make the cohort trace plots and save them
for (n in names(l_param_trt)){
# rename the names from the list
l_trace_plot <- l_out_ce_base_return_all[[n]]$l_trace
# No Treatment Treatment : names in the plot making
M_trt   <- l_trace_plot$trt
M_notrt <- l_trace_plot$notrt
# give the columns full names
colnames(M_trt)   <- v_names_states_full
colnames(M_notrt) <- v_names_states_full
## NO TRT ##
#create the plot
PlotTrace2(trace = M_notrt, xlab = "Cycle", title = paste(paste("No Treatment", " ", remove_date_from_name(n), sep ="")))
# Save the plot
ggsave(path = here("../figures"), filename = paste("Markov Trace", "_", "No Treatment", " ", remove_date_from_name(n), ".png", sep =""))
#create the plot
PlotTrace2(trace = M_trt, xlab = "Cycle", title = paste(paste("Treatment", " ", remove_date_from_name(n), sep ="")))
# Save the plot
ggsave(path = here("../figures"), filename = paste("Markov Trace", "_",  "Treatment", " ", remove_date_from_name(n), ".png", sep =""))
}
# Matrix for the overall survival
m_os <- with(l_out_ce_base_return_all[[1]]$l_param_trt_f,
matrix(data = NA,
nrow = n_t + 1, ncol = length(names(l_param_trt)),
dimnames = list(paste("cycle", 0:n_t, sep = " "),
names(l_param_trt)))
)
# Create a data frame
df_survival <-  with(l_out_ce_base_return_all[[1]]$l_param_trt_f,
data.frame(treatment = rep(names(l_param_trt),
each = (n_t + 1) * length(v_names_str)),
strategy = rep(rep(c("trt", "notrt"),
each = (n_t + 1)), length(names(l_param_trt))),
cycle = rep(rep(0:n_t),
times = length(names(l_param_trt)) * length(v_names_str)),
OS = NA)
)
l_trace <- c()
for(n in names(l_param_trt)){
v_names_str <-l_out_ce_base_return_all[[1]]$l_param_trt_f$v_names_str
for (k in v_names_str){ # loop for the number or strategies
l_trace <- l_out_ce_base_return_all[[n]]$l_trace
l_M     <- l_trace[[k]]
# calculate the overall survival (OS) probability
v_os <- 1 - l_M[, "D"]
m_os[, n] <- v_os  # store the vector in the drug specific column
# create a dataframe with the overall survival
# Run the function to generate a dataframe of the overall survival
df_survival$OS[df_survival$treatment == n & df_survival$strategy == k] <- v_os
}
}
# Run the function plot_survival for all the treatments
for (n in unique(df_survival$treatment)){
df_surv_loop <- filter(df_survival, treatment == n)
plot_surv_full <- plot_survival(df_survival = df_surv_loop, cycle_zoom = FALSE)
plot_surv_full
ggsave(path = here("../figures"), filename = paste("Overall_survival", "_", remove_date_from_name(n), ".png", sep =""))
plot_surv_zoom <- plot_survival(df_survival = df_surv_loop, cycle_zoom = 5)
plot_surv_zoom
ggsave(path = here("../figures"), filename = paste("Overall_survival_start", "_", remove_date_from_name(n), ".png", sep =""))
}
l_le <- generate_df_life_expectancy(df_survival = df_survival, v_names_str = v_names_str)
# Make figures for the LE
for(n in names(l_param_trt)){
df_le_plot <- l_le$df_le %>% #filter the dataframe
filter(treatment == n)
plot <- plot_life_expectancy(df_le_plot)+
scale_color_manual(values = c(my_red, my_darkgreen, my_black)) +
scale_fill_manual(values = c(my_red, my_darkgreen, my_black))# make the plot
ggsave(path = here("../figures"),
filename = paste("LE", "_", remove_date_from_name(n), ".png", sep ="")) #save plot
}
plot <- ggplot(data = l_le$df_le, aes(x = strategy, y = LE, group = strategy, fill = strategy)) +
scale_color_manual(values = c(my_red, my_darkgreen, my_black)) +
scale_fill_manual(values = c(my_red, my_darkgreen, my_black)) + # make the plot
geom_col() +
facet_wrap(~ treatment) +
ggtitle(paste("Life expectancy overview"))
ggsave(path = here("../figures"),
filename = paste("LE_summary.png")) #save plot
# subset the report data
df_le_plot_report <- l_le$df_le[l_le$df_le$treatment %in% l_names$v_names_trt_report, ]
# remove the date
df_le_plot_report$treatment <- sapply( df_le_plot_report$treatment, remove_date_from_name)
plot <- ggplot(data = df_le_plot_report, aes(x = strategy, y = LE, group = strategy, fill = strategy)) +
scale_color_manual(values = c(my_red, my_darkgreen, my_black)) +
scale_fill_manual(values = c(my_red, my_darkgreen, my_black)) + # make the plot
geom_col() +
facet_wrap(~ treatment) +
ggtitle(paste("Life expectancy overview"))
ggsave(path = here("../figures"),
filename = paste("LE_summary_report.png")) #save plot
# Cost effectiveness analysis for lifeyears
# Our effects are life years and therefore the ICER gives the incremental cost per life year gained.  ICER = $/LY
l_df_results <- l_out_ce_base
l_df_cea <- l_df_cea_QALY <- list()
for (n in names(l_param_trt)){
df_cea <- calculate_icers(cost     = l_df_results[[n]]$Cost,
effect     = l_df_results[[n]]$LY,
strategies = l_df_results[[n]]$Strategy)
l_df_cea[[n]] <- df_cea
# Cost effectiveness analysis for quality of life
# Effects of df_cu is utility, and therefore the ICER gives the incremental cost per utility gained. ICER = $/utility
df_cea_QALY <- calculate_icers(cost       = l_df_results[[n]]$Cost,
effect     = l_df_results[[n]]$Effect,
strategies = l_df_results[[n]]$Strategy)
l_df_cea_QALY[[n]] <- df_cea_QALY
}
# Print all CEA dataframes lifeyears
l_df_cea_LY <- l_df_cea
# Print all CEA dataframes QOL
l_df_cea_QALY
# save the data
save(l_df_cea_QALY, file = "../output/l_df_cea_QALY.rda")
save(l_df_cea, file = "../output/l_df_cea_LY.rda")
v_names_column <- c("Cost-effective",
"Incr cost Rx", "Incr effect Rx",
"ICER",
"Incr NMB", "Incr NHB")
m_summary_cea_QALY <- matrix(data = NA,
ncol = length(v_names_column) ,
nrow = length(names(l_param_trt)),
dimnames = list(names(l_param_trt), v_names_column))
# NOTE:
# Yes*  = Trt is dominant
# No*   = Trt is dominated by noTrt
# YEs** = Trt is cost-saving ICER > WTP
# No**  = Trt is cost-saving, but not enough that ICER > WTP
for(n in names(l_param_trt)){
df_summary_f    <- l_df_cea_QALY[[n]]
df_combined_f   <- l_out_ce_base_return_all[[n]]$df_ce_combined
# Values to store always
m_summary_cea_QALY[n, "Incr NMB"] <- df_combined_f$NMB[df_combined_f$Strategy == "trt"] - df_combined_f$NMB[df_combined_f$Strategy == "notrt"]
m_summary_cea_QALY[n, "Incr NHB"] <- df_combined_f$NHB[df_combined_f$Strategy == "trt"] - df_combined_f$NHB[df_combined_f$Strategy == "notrt"]
# check if treatment is not dominated or dominant
if(df_summary_f$Status[df_summary_f$Strategy == "trt"] == "D"){
m_summary_cea_QALY[n, "Cost-effective"] <- "No*"
m_summary_cea_QALY[n, "Incr effect Rx"] <- df_summary_f$Effect[df_summary_f$Strategy == "trt"] - df_summary_f$Effect[df_summary_f$Strategy == "notrt"]
m_summary_cea_QALY[n, "Incr cost Rx"] <- df_summary_f$Cost[df_summary_f$Strategy == "trt"] - df_summary_f$Cost[df_summary_f$Strategy == "notrt"]
} else if (df_summary_f$Status[df_summary_f$Strategy == "notrt"] == "D"){
m_summary_cea_QALY[n, "Cost-effective"] <- "Yes*"
m_summary_cea_QALY[n,"Incr effect Rx"] <- df_summary_f$Effect[df_summary_f$Strategy == "trt"] - df_summary_f$Effect[df_summary_f$Strategy == "notrt"]
m_summary_cea_QALY[n, "Incr cost Rx"]     <- df_summary_f$Cost[df_summary_f$Strategy == "trt"] - df_summary_f$Cost[df_summary_f$Strategy == "notrt"]
} else if(!is.na(df_summary_f$ICER[df_summary_f$Strategy == "trt"]) & df_summary_f$ICER[df_summary_f$Strategy == "trt"] > l_param_trt[[n]]$wtp){
m_summary_cea_QALY[n, "Cost-effective"] <- "No"
m_summary_cea_QALY[n, "ICER"         ] <- df_summary_f$ICER[df_summary_f$Strategy       == "trt"]
m_summary_cea_QALY[n, "Incr effect Rx"] <- round(df_summary_f$Inc_Effect[df_summary_f$Strategy == "trt"], 3)
m_summary_cea_QALY[n, "Incr cost Rx" ] <- round(df_summary_f$Inc_Cost[df_summary_f$Strategy   == "trt"])
} else if(!is.na(df_summary_f$ICER[df_summary_f$Strategy == "trt"]) & df_summary_f$ICER[df_summary_f$Strategy == "trt"] <= l_param_trt[[n]]$wtp){
m_summary_cea_QALY[n, "Cost-effective"] <- "Yes"
m_summary_cea_QALY[n, "ICER"] <- df_summary_f$ICER[df_summary_f$Strategy == "trt"]
m_summary_cea_QALY[n,"Incr effect Rx"] <- df_summary_f$Inc_Effect[df_summary_f$Strategy == "trt"]
m_summary_cea_QALY[n,"Incr cost Rx"] <- df_summary_f$Inc_Cost[df_summary_f$Strategy == "trt"]
} else{
m_summary_cea_QALY[n, "Incr effect Rx"] <- -1 * df_summary_f$Inc_Effect[df_summary_f$Strategy == "notrt"]
m_summary_cea_QALY[n, "Incr cost Rx"] <- -1 * df_summary_f$Inc_Cost[df_summary_f$Strategy   == "notrt"]
m_summary_cea_QALY[n, "ICER"] <- df_summary_f$ICER[df_summary_f$Strategy == "notrt"]
if (round(df_summary_f$ICER[df_summary_f$Strategy       == "notrt"]) > l_param_trt[[n]]$wtp) {
m_summary_cea_QALY[n, "Cost-effective"] <- "Yes**"
} else { m_summary_cea_QALY[n, "Cost-effective"] <- "No**"}
}
df_summary_cea_QALY <- as.data.frame(m_summary_cea_QALY)
}
# make all columns that are numbers numeric
df_summary_cea_QALY[, -1] <- data.frame(lapply(df_summary_cea_QALY[, -1], as.numeric))
# Save the df in the output folder
save(df_summary_cea_QALY, file = "../output/df_summary_cea_QALY.rda")
# Format the table
## Full tabel
df_summary_cea_QALY_plot_order <- format_table_summary(df_summary_cea_QALY)
df_summary_cea_QALY_plot_order[is.na(df_summary_cea_QALY_plot_order)] <- "n/a"
png("../figures/table_summary_cea_QALY_all.png", width = 2000, height = 380, bg = "white", pointsize = 22)
grid.table(df_summary_cea_QALY_plot_order)
dev.off()
## Subset
df_summary_cea_QALY_report <- format_table_summary(df_summary_cea_QALY, v_names_subset = l_names$v_names_trt_report)
format(df_summary_cea_QALY_report, digits = 3, big.mark   = ",")
#df_summary_cea_QALY_report[is.na(df_summary_cea_QALY_report)] <- "-"
df_summary_cea_QALY_report[is.na(df_summary_cea_QALY_report)] <- "n/a"
png("../figures/table_summary_cea_QALY.png", width = 2000, height = 380, bg = "white", pointsize = 22)
grid.table(format(df_summary_cea_QALY_report, digits = 3, big.mark   =","))
dev.off()
v_names_column <- c("Cost-effective",
"Incr cost Rx", "Incr effect Rx",
"ICER",
"Incr NMB", "Incr NHB")
m_summary_cea_LY <- matrix(data = NA,
ncol = length(v_names_column) ,
nrow = length(names(l_param_trt)),
dimnames = list(names(l_param_trt), v_names_column))
# NOTE:
# Yes*  = Trt is dominant
# No*   = Trt is dominated by noTrt
# YEs** = Trt is cost-saving ICER > WTP
# No**  = Trt is cost-saving, but not enough that ICER > WTP
for(n in names(l_param_trt)){
df_summary_f    <- l_df_cea_LY[[n]]
df_combined_f   <- l_out_ce_base_return_all[[n]]$df_ce_combined
# Values to store always
m_summary_cea_LY[n, "Incr NMB"] <- df_combined_f$NMB_LY[df_combined_f$Strategy == "trt"] - df_combined_f$NMB_LY[df_combined_f$Strategy == "notrt"]
m_summary_cea_LY[n, "Incr NHB"] <- df_combined_f$NHB_LY[df_combined_f$Strategy == "trt"] - df_combined_f$NHB_LY[df_combined_f$Strategy == "notrt"]
# check if treatment is not dominated or dominant
if(df_summary_f$Status[df_summary_f$Strategy == "trt"] == "D"){
m_summary_cea_LY[n, "Cost-effective"] <- "No*"
m_summary_cea_LY[n, "Incr effect Rx"] <- df_summary_f$Effect[df_summary_f$Strategy == "trt"] - df_summary_f$Effect[df_summary_f$Strategy == "notrt"]
m_summary_cea_LY[n, "Incr cost Rx"] <- df_summary_f$Cost[df_summary_f$Strategy == "trt"] - df_summary_f$Cost[df_summary_f$Strategy == "notrt"]
} else if (df_summary_f$Status[df_summary_f$Strategy == "notrt"] == "D"){
m_summary_cea_LY[n, "Cost-effective"] <- "Yes*"
m_summary_cea_LY[n,"Incr effect Rx"] <- df_summary_f$Effect[df_summary_f$Strategy == "trt"] - df_summary_f$Effect[df_summary_f$Strategy == "notrt"]
m_summary_cea_LY[n, "Incr cost Rx"]     <- df_summary_f$Cost[df_summary_f$Strategy == "trt"] - df_summary_f$Cost[df_summary_f$Strategy == "notrt"]
} else if(!is.na(df_summary_f$ICER[df_summary_f$Strategy == "trt"]) & df_summary_f$ICER[df_summary_f$Strategy == "trt"] > l_param_trt[[n]]$wtp){
m_summary_cea_LY[n, "Cost-effective"] <- "No"
m_summary_cea_LY[n, "ICER"         ] <- df_summary_f$ICER[df_summary_f$Strategy       == "trt"]
m_summary_cea_LY[n, "Incr effect Rx"] <- round(df_summary_f$Inc_Effect[df_summary_f$Strategy == "trt"], 3)
m_summary_cea_LY[n, "Incr cost Rx" ] <- round(df_summary_f$Inc_Cost[df_summary_f$Strategy   == "trt"])
} else if(!is.na(df_summary_f$ICER[df_summary_f$Strategy == "trt"]) & df_summary_f$ICER[df_summary_f$Strategy == "trt"] <= l_param_trt[[n]]$wtp){
m_summary_cea_LY[n, "Cost-effective"] <- "Yes"
m_summary_cea_LY[n, "ICER"] <- df_summary_f$ICER[df_summary_f$Strategy == "trt"]
m_summary_cea_LY[n,"Incr effect Rx"] <- df_summary_f$Inc_Effect[df_summary_f$Strategy == "trt"]
m_summary_cea_LY[n,"Incr cost Rx"] <- df_summary_f$Inc_Cost[df_summary_f$Strategy == "trt"]
} else{
m_summary_cea_LY[n, "Incr effect Rx"] <- -1 * df_summary_f$Inc_Effect[df_summary_f$Strategy == "notrt"]
m_summary_cea_LY[n, "Incr cost Rx"] <- -1 * df_summary_f$Inc_Cost[df_summary_f$Strategy   == "notrt"]
m_summary_cea_LY[n, "ICER"] <- df_summary_f$ICER[df_summary_f$Strategy == "notrt"]
if (round(df_summary_f$ICER[df_summary_f$Strategy       == "notrt"]) > l_param_trt[[n]]$wtp) {
m_summary_cea_LY[n, "Cost-effective"] <- "Yes**"
} else { m_summary_cea_LY[n, "Cost-effective"] <- "No**"}
}
df_summary_cea_LY <- as.data.frame(m_summary_cea_LY)
}
# make all columns that are numbers numeric
df_summary_cea_LY[, -1] <- data.frame(lapply(df_summary_cea_LY[, -1], as.numeric))
# Save the df in the output folder
save(df_summary_cea_LY, file = "../output/df_summary_cea_LY.rda")
# Format the table
## Full tabel
df_summary_cea_LY_plot_order <- format_table_LY_summary(df_summary_cea_LY)
df_summary_cea_LY_plot_order[is.na(df_summary_cea_LY_plot_order)] <- "n/a"
png("../figures/table_summary_cea_LY_all.png", width = 2000, height = 380, bg = "white", pointsize = 22)
grid.table(df_summary_cea_LY_plot_order)
dev.off()
## Subset
df_summary_cea_LY_report <- format_table_summary(df_summary_cea_LY, v_names_subset = l_names$v_names_trt_report)
format(df_summary_cea_LY_report, digits = 3, big.mark   = ",")
#df_summary_cea_QALY_report[is.na(df_summary_cea_QALY_report)] <- "-"
df_summary_cea_LY_plot_order[is.na(df_summary_cea_LY_plot_order)] <- "n/a"
png("../figures/table_summary_cea_LY.png", width = 2000, height = 380, bg = "white", pointsize = 22)
grid.table(format(df_summary_cea_LY_report, digits = 3, big.mark   =","))
dev.off()
