numericInput("c_Trt",
Slider2,
value = n_costs,
step = 1),
sliderInput("ci_c_Trt",
Slider2_1,
min = 0,
max = 1e6,
value = c(ci_costs),
step = 1),
numericInput("n_Trt",
Slider2_2,
value = n_Trt,
step = 1),
Tab_instr1,
sliderInput("LOS_Trt",
Slider3,
min = 0,
max = 73,
value = LOS_Trt,
step = 1),
sliderInput("LOS_noTrt",
Slider4,
min = 0,
max = 73,
value = LOS_noTrt,
step = 1),
sliderInput("p_IC",
Slider5,
min = 0,
max = 1,
value = 0.18,
step = 0.01)
),
tabPanel(title = Tab0_1,
Tab_instr2,
sliderInput("r_discount",
Slider5,
min = 0,
max = 10,
value = r_discount,
step = 0.5),
sliderInput("n_wtp",
Slider7,
min = 0,
max = 3*1e5,
step = 1e3,
value = n_wtp),
Tab_instr3,
sliderInput("n_iter",
Slider6,
min = 0,
max = 10000,
value = n_iter,
step = 50)
),
tabPanel(title = Tab0_2,
Tab_instr4,
numericInput(inputId = "n_H_current",
label = Population1,
value = n_H_current),
numericInput(inputId = "n_H_future",
label = Population0,
value = n_H_future),
actionButton("RunVOI", "Run VOI")
)
),
actionButton("RunPA", "Run PA")
),
mainPanel (
tabsetPanel(id = "outputs", type = "tabs",
# Display outputs
Main_Output1,
tabPanel(title = Tab0_3,
Documentation0,
Documentation1,
Documentation2,
Documentation2_1,
Documentation2_2,
Documentation3,
Documentation3_1,
Documentation4,
Documentation4_1,
Documentation5,
Documentation5_1,
Documentation6,
Documentation6_1,
Documentation7,
Documentation7_1,
Documentation8,
Documentation8_1,
Documentation9,
Documentation10,
Documentation11,
Documentation12,
Documentation13,
Documentation14,
Documentation14_1,
Documentation15,
Documentation15_1,
Documentation16,
Documentation16_1,
Documentation17,
Documentation17_1,
Documentation18,
Documentation18_1
),
tabPanel(title = "Disclaimer",
DocumentationDisclaimer1,
DocumentationDisclaimer2,
DocumentationDisclaimer3,
DocumentationDisclaimer4,
DocumentationDisclaimer5,
DocumentationDisclaimer6),
tabPanel(title = "Acknowledgement",
DocumentationAck1,
DocumentationAck2,
DocumentationAck3)
)
)
),
hr(),
License
)
load("output/l_m_Parameters.rda")
l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$p_IC
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$p_IC)
runApp()
runApp()
runApp()
fluidPage(
tags$head(
includeCSS("www/style_EK.css")
),
theme = shinytheme(theme = "sandstone"),
useShinyjs(),
withMathJax(),
h1(paste(title, sep =", "), .noWs ="outside"),
# Application title
Credits2,
Credits3,
Credits4,
br(),
Subtitle1,
Subtitle1.1,
hr(),
Instructions0,
Instructions1,
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tabsetPanel(id = "inputs",
type = "tabs",
tabPanel(title = Tab0_0,
Tab1_1,
Tab1_2,
numericInput("hr_D_Trt_timespan1",
Slider1,
value = n_eff_size,
step = 0.001),
sliderInput("Uncertainty around effect size",
Slider1_1,
min = 0,
max = 3,
value = c(ci_eff_size),
step = 0.001),
Tab1_3,
numericInput("c_Trt",
Slider2,
value = n_costs,
step = 1),
sliderInput("ci_c_Trt",
Slider2_1,
min = 0,
max = 1e6,
value = c(ci_costs),
step = 1),
numericInput("n_Trt",
Slider2_2,
value = n_Trt,
step = 1),
Tab_instr1,
sliderInput("LOS_Trt",
Slider3,
min = 0,
max = 73,
value = LOS_Trt,
step = 1),
sliderInput("LOS_noTrt",
Slider4,
min = 0,
max = 73,
value = LOS_noTrt,
step = 1),
Tab_instr1_1,
sliderInput("p_IC",
Slider4_1,
min = 0,
max = 1,
value = 0.165,
step = 0.01)
),
tabPanel(title = Tab0_1,
Tab_instr2,
sliderInput("r_discount",
Slider5,
min = 0,
max = 10,
value = r_discount,
step = 0.5),
sliderInput("n_wtp",
Slider7,
min = 0,
max = 3*1e5,
step = 1e3,
value = n_wtp),
Tab_instr3,
sliderInput("n_iter",
Slider6,
min = 0,
max = 10000,
value = n_iter,
step = 50)
),
tabPanel(titl = Tab0_1_1),
tabPanel(title = Tab0_2,
Tab_instr4,
numericInput(inputId = "n_H_current",
label = Population1,
value = n_H_current),
Population1_1,
numericInput(inputId = "n_H_future",
label = Population0,
value = n_H_future),
Population0_1,
actionButton("RunVOI", "Run VOI")
)
),
actionButton("RunPA", "Run PA")
),
mainPanel (
tabsetPanel(id = "outputs", type = "tabs",
# Display outputs
Main_Output1,
tabPanel(title = Tab0_3,
Documentation0,
Documentation1,
Documentation2,
Documentation2_1,
Documentation2_2,
Documentation3,
Documentation3_1,
Documentation4,
Documentation4_1,
Documentation5,
Documentation5_1,
Documentation6,
Documentation6_1,
Documentation7,
Documentation7_1,
Documentation8,
Documentation8_1,
Documentation9,
Documentation10,
Documentation11,
Documentation12,
Documentation13,
Documentation14,
Documentation14_1,
Documentation15,
Documentation15_1,
Documentation16,
Documentation16_1,
Documentation17,
Documentation17_1,
Documentation18,
Documentation18_1
),
tabPanel(title = "Disclaimer",
DocumentationDisclaimer1,
DocumentationDisclaimer2,
DocumentationDisclaimer3,
DocumentationDisclaimer4,
DocumentationDisclaimer5,
DocumentationDisclaimer6),
tabPanel(title = "Acknowledgement",
DocumentationAck1,
DocumentationAck2,
DocumentationAck3)
)
)
),
hr(),
License
)
runApp()
l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_H
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_H)
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_I)
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_IC)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinybusy")
add_busy_bar(color = "#ee8472", height = "8px")
library(shinybusy)
add_busy_bar(color = "#ee8472")
shiny::runApp()
<<<<<<< Updated upstream
runApp()
runApp()
runApp()
runApp()
runApp()
beta_params(mean = mean, sigma = SE)
n <- 17698
mean <- 0.88
SE <- 0.0015
median <- 1
beta_params(mean = mean, sigma = SE)
alpha <- beta_params(mean = mean, sigma = SE)$alpha
alpha
alpha
beta <- beta_params(mean = mean, sigma = SE)$beta
alpha <- beta_params(mean = mean, sigma = SE)$alpha
beta <- beta_params(mean = mean, sigma = SE)$beta
mean(rbeta(n = 1e4, shape1 = alpha, shape2 = beta))
curve(dbeta(x, alpha, beta))
curve(dbeta(n, alpha, beta))
n <- 17698
mean <- 0.88
SE <- 0.0015
median <- 1
beta_params(mean = mean, sigma = SE)
alpha <- beta_params(mean = mean, sigma = SE)$alpha
beta <- beta_params(mean = mean, sigma = SE)$beta
mean(rbeta(n = 1e4, shape1 = alpha, shape2 = beta))
curve(dbeta(n, alpha, beta))
curve(dbeta(x, alpha, beta))
library(dampack)
n_iter <- 10000
# This function requires an alpha and beta, but we give it CI levels
# Current information in the excel sheet
# U_healthy
u_H_mean <- 0.5
u_H_Lo_alpha <- 0.23
u_H_Hi_beta  <- 0.88
v_u_H <- rbeta(n = n_iter,
shape1 = u_H_Lo_alpha,
shape2 = u_H_Hi_beta)
hist(v_u_H)
mean(v_u_H)
u_RH_mean <- 0.880
u_RH_Lo_alpha <- 0.877
u_RH_Hi_beta  <- 0.883
v_u_RH <- rbeta(n = n_iter,
shape1 = u_RH_Lo_alpha,
shape2 = u_RH_Hi_beta)
hist(v_u_RH)
mean(v_u_RH) # Veel te laag, compared to mean
u_RIC_mean <- 0.677
u_RIC_SD <- 0.301
beta_params(u_RIC_mean, u_RIC_SD)
u_RH_SD <- 0.0015
beta_params(u_RH_mean, u_RH_SD)
v_u_RH_a <- rbeta(n = n_iter,
shape1 = beta_params(u_RH_mean, u_RH_SD)$alpha,
shape2 = beta_params(u_RH_mean, u_RH_SD)$beta)
hist(v_u_RH_a)
mean(v_u_RH_a) #
u_RH_mean <- 0.880
u_RH_Lo_alpha <- 0.877
u_RH_Hi_beta  <- 0.883
v_u_RH <- rbeta(n = n_iter,
shape1 = u_RH_Lo_alpha,
shape2 = u_RH_Hi_beta)
hist(v_u_RH)
mean(v_u_RH) # Veel te laag, compared to mean
dampack
dampack::beta_params
beta_params(u_RH_mean, u_RH_SD)
u_RH_mean <- 0.880
u_RH_Lo_alpha <- 0.877
u_RH_Hi_beta  <- 0.883
v_u_RH <- rbeta(n = n_iter,
shape1 = u_RH_Lo_alpha,
shape2 = u_RH_Hi_beta)
hist(v_u_RH)
mean(v_u_RH) # Veel te laag, compared to mean
# Data paper:
# 0.880	0.0015
u_RH_SD <- 0.0015
beta_params(u_RH_mean, u_RH_SD)
u_RIC_mean <- 0.677
u_RIC_SD <- 0.301
beta_params(u_RIC_mean, u_RIC_SD)
# NOTE: Getallen omgedraaid!!!
# Daar zit een fout! Alpha moet het hoge getal zijn en beta het lage!
# TO DO: Update the excel data!!!
u_RIC_Lo_alpha <- 0.4565801
u_RIC_Hi_beta  <- 0.9569805
v_u_RIC <- rbeta(n = n_iter,
shape1 = u_RIC_Lo_alpha,
shape2 = u_RIC_Hi_beta)
hist(v_u_RIC)
mean(v_u_RIC)
# Data paper:
# 0.880	0.0015
u_RH_SD <- 0.0015
beta_params(u_RH_mean, u_RH_SD)
v_u_RH_a <- rbeta(n = n_iter,
shape1 = beta_params(u_RH_mean, u_RH_SD)$alpha,
shape2 = beta_params(u_RH_mean, u_RH_SD)$beta)
hist(v_u_RH_a)
mean(v_u_RH_a) # Veel te laag, compared to mean = much better mean! and dist
#u_R_H
u_RH_mean <- 0.880
# Data paper:
# 0.880	0.0015
u_RH_SD <- 0.0015
u_RH_mean
u_RH_SD
a
beta_params(u_RH_mean, u_RH_SD)
u_RIC_mean <- 0.677
u_RIC_SD <- 0.301
beta_params(u_RIC_mean, u_RIC_SD)
beta_params(u_RH_mean, u_RH_SD)
v_u_RH_a <- rbeta(n = n_iter,
shape1 = beta_params(u_RH_mean, u_RH_SD)$alpha,
shape2 = beta_params(u_RH_mean, u_RH_SD)$beta)
hist(v_u_RH_a)
mean(v_u_RH_a) # Veel te laag, compared to mean = much better mean! and dist
shiny::runApp()
runApp()
u_R_IC
u_R_IC
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
l_out_evpi_QALY$EVPI[l_out_evpi_QALY$WTP == 100000]
runApp()
runApp()
runApp()
Main_Output1 =  tabPanel( title = "Results",
br(),
h3(strong("With this therapy:")),
h4(strong("Basecase values:")),
h5("Cost = US dollar, Effect = QALY, LY = Life years, NMB: Net monetary benefit for QALYs, NHB: Net health benefit for QALYs, NMB_LY: Net monetary benefit for LYs, NHB_LY: Net health benefit for LYs"),
tableOutput("df_basecase"),
h4(strong("Basecase cost-effectiveness results:")),
h5("Effect = QALY and Cost = US dollar"),
tableOutput("df_CEA_basecase"),
h5("Lengend: trt: treatment, notrt: no treatment, Inc_Cost: Incremental costs, Inc:Effect: Incremental effects in QALY, QALY:Quality adjusted life years, ICER: Incremental cost effectivenes ratio, ND: no-dominated, D:dominated, ED: extended dominated"),
h4(strong("PA cost-effectiveness results:")),
p("Click the [Run PA] button to see the (changes in the) probabilistic analysis results. Please note that this simulation takes some time."),
plotOutput("plot_CE_PSA"),
p(""),
tableOutput("df_CEA_PSA"),
h4(strong("Expected net benefit results:")),
textOutput("text"),
p("Click the [Run VOI] button to see (changes in the) VOI results. Please note that this simulation takes some time.")
)
License = h6("This software is licensed via the GNU General Public License 3.0.")
runApp()
runApp()
runApp()
runApp()
View(m_C_psa)
View(m_E_psa)
v_wtp <- seq(0, 3 * 1e5, 1e3)
l_pop <- input$n_H_current * mean(m_Parameters[, "p_IC_notrt"])
m_Parameters[, "p_IC_notrt"]
mean(m_Parameters[, "p_IC_notrt"]
mean(m_Parameters[, "p_IC_notrt"])
l_pop <-  1090* mean(m_Parameters[, "p_IC_notrt"])
l_pop
m_E_psa
v_wtp
m_E_psa
?seq
v_wtp <- seq(0, 3 * 1e5, length = input$n_iter)
seq
v_wtp <- seq(0, 3 * 1e5, length.out = input$n_iter)
v_wtp <- seq(0, 3 * 1e5, length.out = 100)
v_wtp
runApp()
evpi(v.wtp = v_wtp,
m.e   = m_E_psa,
m.c   = m_C_psa,
pop   = l_pop)
m_E_psa
m_E_psa
v_wtp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(m_C_psa)
runApp()
shiny::runApp()
=======
shiny::runApp()
p_load_gh("DARTH-git/dampack") # coding framework to construct model-based cost-effectiveness analysis in R
#p_load_gh("DARTH-git/darthpack") # package for analyzing and visualizing the health economic outputs of mathematical models
p_load_gh("DARTH-git/darthtools") # a R package that contains tools frequently used by the DARTH workgroup
if (!require("remotes"))
install.packages("remotes")
remotes::install_github("jcrodriguez1989/shinyParallel")
library("shinyParallel")
rm(list=ls())
# Load the data = output from the main model
load("output/l_param_trt.rda")  #
load("output/l_names.rda")
# Select for each drug one list -> using the drug name
l_param_shiny <- l_param_trt[c(l_names$v_names_trt_report)]
names(l_param_shiny) <- l_names$v_names_trt_report_ful
jscode <- "shinyjs.refresh = function() { history.go(0); }"
# Define UI for application that draws a histogram
ui <- function(req) {
Lang = "EN"
source(paste0("layout ", Lang, ".R"), local= T)
source(paste0("values ", Lang, ".R"), local= T)
source(paste0("documentation ", Lang, ".R"), local= T)
#source("documentation.R") #@EK changed for language hope that works
fluidPage(
tags$head(
includeCSS("www/style_EK.css")
),
theme = shinytheme(theme = "sandstone"),
useShinyjs(),
withMathJax(),
h1(paste(title, lng, sep =", "), .noWs ="outside"),
# Application title
Credits2,
Credits3,
Credits4,
br(),
Subtitle1,
Subtitle1.1,
hr(),
Instructions0,
Instructions1,
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tabsetPanel(id = "inputs",
type = "tabs",
tabPanel(title = Tab0_0,
Tab1_1,
Tab1_2,
numericInput("hr_D_Trt_timespan1",
Slider1,
value = n_eff_size,
step = 0.001),
sliderInput("Uncertainty around effect size",
Slider1_1,
min = 0,
max = 2,
value = c(ci_eff_size),
step = 0.001),
Tab1_3,
numericInput("c_Trt",
Slider2,
value = n_costs,
step = 1),
sliderInput("ci_c_Trt",
Slider2_1,
min = 0,
max = 1e6,
value = c(ci_costs),
step = 1),
numericInput("n_Trt",
Slider2_2,
value = n_Trt,
step = 1),
Tab_instr1,
sliderInput("LOS_Trt",
Slider3,
min = 0,
max = 100,
value = LOS_Trt,
step = 1),
sliderInput("LOS_noTrt",
Slider4,
min = 0,
max = 100,
value = LOS_noTrt,
step = 1)
),
tabPanel(title = Tab0_1,
Tab_instr2,
sliderInput("r_discount",
Slider5,
min = 0,
max = 10,
value = r_discount,
step = 0.5),
sliderInput("n_wtp",
Slider7,
min = 0,
max = 3*1e5,
step = 1e3,
value = n_wtp),
Tab_instr3,
sliderInput("n_iter",
Slider6,
min = 0,
max = 10000,
value = n_iter,
step = 50)
),
tabPanel(title = Tab0_2,
Tab_instr4,
numericInput(inputId = "n_H_current",
label = Population1,
value = n_H_current),
numericInput(inputId = "n_H_future",
label = Population0,
value = n_H_future),
actionButton("RunVOI", "Run VOI")
)
),
actionButton("RunPSA", "Run PSA")
),
mainPanel (
tabsetPanel(id = "outputs", type = "tabs",
# Display outputs
Main_Output1,
tabPanel(title = Tab0_3,
Documentation0,
Documentation1,
Documentation2,
Documentation2_1,
Documentation2_2,
Documentation3,
Documentation3_1,
Documentation4,
Documentation4_1,
Documentation5,
Documentation5_1,
Documentation6,
Documentation6_1,
Documentation7,
Documentation7_1,
Documentation8,
Documentation8_1,
Documentation9,
Documentation10,
Documentation11,
Documentation12,
Documentation13,
Documentation14,
Documentation14_1,
Documentation15,
Documentation15_1,
Documentation16,
Documentation16_1,
Documentation17,
Documentation17_1,
Documentation18,
Documentation18_1
),
tabPanel(title = "Disclaimer",
DocumentationDisclaimer1,
DocumentationDisclaimer2,
DocumentationDisclaimer3,
DocumentationDisclaimer4,
DocumentationDisclaimer5,
DocumentationDisclaimer6),
tabPanel(title = "Acknowledgement",
DocumentationAck1,
DocumentationAck2,
DocumentationAck3)
)
)
),
hr(),
License
)
}
# Define server logic required to draw a histogram
server <- function(input, output) {
source("functions/00_general_mycolour.R")
source("functions/00_functions_darthtools.R")
source("functions/01_model_input_data_hospitalization_functions.R") # functions for the model
source("functions/01_model_inputs_functions.R")  # functions for the data
source("functions/02_decision_model_functions.R") # functions for model structure & to run the model
source("functions/02_decision_model_plot_functions.R") # plot functions
source("functions/02_decision_model_calcout_functions.R") # the entire model
Lang <- read.csv("changes.csv")$x
if (is.na(Lang)) Lang = "EN"
source(paste0("layout ", Lang, ".R"), local= T)
source(paste0("values ", Lang, ".R"), local= T)
source(paste0("documentation ", Lang, ".R"), local= T)
write.csv("EN", "changes.csv")
# Load the data = output from the main model
load("output/l_param_trt_basecase.rda")  #
load("output/l_names.rda")
load("output/l_m_Parameters.rda")
load("output/l_input_general.rda")
data <- reactive({
validate(
need(input$c_Trt > input$ci_c_Trt[1] & input$c_Trt < input$ci_c_Trt[2] , "Please select a data set")
)
})
# Select for each drug one list -> using the drug name
l_param_shiny <- l_param_trt_basecase[c(l_names$v_names_trt_report)]
names(l_param_shiny) <- l_names$v_names_trt_report_ful
l_m_Parameters_shiny <- l_m_Parameters[c(l_names$v_names_trt_report)]
names(l_m_Parameters_shiny) <- l_names$v_names_trt_report_ful
l_param <- l_param_shiny$Dexamethasone
# run the basecase function
output$df_basecase <- renderTable({
#update the values
l_param$hr_D_Trt_timespan1_novent<- input$hr_D_Trt_timespan1
l_param$hr_D_Trt_timespan1_vent  <- input$hr_D_Trt_timespan1
l_param$c_Trt_private            <- input$c_Trt
l_param$c_Trt_public             <- input$c_Trt
l_param$n_Trt                    <- input$n_Trt
l_param$LOS_Trt                  <- input$LOS_Trt
l_param$LOS_noTrt                <- input$LOS_noTrt
l_param$d_c                      <- input$r_discount/100
l_param$d_e                      <- input$r_discount/100
df_ce   <- calculate_cea_output_VOI_COVID(l_param,
n_wtp = input$n_wtp)
df_ce %>% arrange(desc(Strategy))
})
# run the calculate ICER function
output$df_CEA_basecase<- renderTable({
l_param$hr_D_Trt_timespan1_novent<- input$hr_D_Trt_timespan1
l_param$hr_D_Trt_timespan1_vent  <- input$hr_D_Trt_timespan1
l_param$c_Trt_private            <- input$c_Trt
l_param$c_Trt_public             <- input$c_Trt
l_param$n_Trt                    <- input$n_Trt
l_param$LOS_Trt                  <- input$LOS_Trt
l_param$LOS_noTrt                <- input$LOS_noTrt
l_param$d_c                      <- input$r_discount/100
l_param$d_e                      <- input$r_discount/100
df_ce <- calculate_cea_output_VOI_COVID(l_param,
n_wtp = input$n_wtp)
df_cea_QALY <- calculate_icers(cost       = df_ce$Cost,
effect     = df_ce$Effect,
strategies = df_ce$Strategy)
df_cea_QALY %>%
arrange(desc(Strategy))
})
observeEvent(input$RunPSA, {  #
# add all the action that are needed before the model needs to start running
withProgress(message = 'Performing probabilistic sensitivity analysis', value = 0, {
# select the treatment of interest
m_Parameters <- l_m_Parameters_shiny$Dexamethasone[1:input$n_iter, ]
v_output <- c("LY", "QALY", "Costs")            # Vector of output names
n_str <- 2
m_C_psa <- m_E_psa <- matrix(NA, ncol = 2, nrow = input$n_iter)
colnames(m_C_psa) <- colnames(m_E_psa) <- c("notrt", "trt")
#Initiate list
l_df_par <- l_m_output_par <-  list()
m_output_par <- matrix(NA,
ncol = as.numeric(length(v_output)) * as.numeric(n_str),
nrow = input$n_iter,
dimnames = list(paste("Iteration", 1:input$n_iter, sep = " "),
(paste(rep(v_output, n_str), rep(c("notrt", "trt"),
each = length(v_output)), sep = " "))))
# Get number of cores
os <- get_os()
no_cores <- parallel::detectCores() - 3
# ## Run parallelized PSA based on OS
if(os == "macosx"){
# Initialize cluster object
cl <- parallel::makeForkCluster(no_cores)
# Register clusters
doParallel::registerDoParallel(cl)
# Run parallelized PSA
# Parameters with a distribution - sample fist
v_c_trt <- runif(n = input$n_iter,
min =  input$ci_c_Trt[1],
max = input$ci_c_Trt[2])
# Replace baseline items in a list
m_Parameters[, "hr_D_Trt_timespan1_novent"]<- input$hr_D_Trt_timespan1
m_Parameters[, "hr_D_Trt_timespan1_vent"]  <- input$hr_D_Trt_timespan1
m_Parameters[, "c_Trt_private"]            <- v_c_trt
m_Parameters[, "c_Trt_public"]             <- v_c_trt
m_Parameters[, "n_Trt"]                    <- input$n_Trt
m_Parameters[, "LOS_Trt"]                  <- input$LOS_Trt
m_Parameters[, "LOS_noTrt"]                <- input$LOS_noTrt
m_Parameters[, "d_c"]                      <- input$r_discount/100
m_Parameters[, "d_e"]                      <- input$r_discount/100
df_ce <- foreach::foreach(g = 1:input$n_iter, .combine = rbind) %dopar% {
l_param_psa <- as.list(m_Parameters[g, ])
l_param_psa <- c(l_param_psa, l_input_general) # Combine with the general input
# Run the model
l_out_temp <- calculate_cea_output_VOI_COVID(l_param_psa, n_wtp = l_param_psa$wtp, verbose = FALSE)
df_ce <- c(l_out_temp$Cost,
l_out_temp$Effect,
l_out_temp$LY,
l_out_temp$NMB,
l_out_temp$NHB)
}
# Save the output
m_output_par[, "Costs notrt"]   <- df_ce[, 1]
m_output_par[, "Costs trt"]     <- df_ce[, 2]
m_output_par[, "QALY notrt"]    <- df_ce[, 3]
m_output_par[, "QALY trt"]      <- df_ce[, 4]
m_output_par[, "LY notrt"]      <- df_ce[, 5]
m_output_par[, "LY trt"]        <- df_ce[, 6]
# Add storing the values of each iterations
m_C_psa[, "notrt"] <- m_output_par[, "Costs notrt"]
m_C_psa[, "trt"]   <- m_output_par[, "Costs trt"]
m_E_psa[, "notrt"] <- m_output_par[, "QALY notrt"]
m_E_psa[, "trt"]   <- m_output_par[, "QALY trt"]
}
## When a Linux
if(os == "Linux"){
# Initialize cluster object
cl <- parallel::makeCluster(no_cores)
# Register clusters
doParallel::registerDoMC(cl)
# Run parallelized PSA
# Parameters with a distribution - sample fist
v_c_trt <- runif(n = input$n_iter,
min =  input$ci_c_Trt[1],
max = input$ci_c_Trt[2])
# Replace baseline items in a list
m_Parameters[, "hr_D_Trt_timespan1_novent"]<- input$hr_D_Trt_timespan1
m_Parameters[, "hr_D_Trt_timespan1_vent"]  <- input$hr_D_Trt_timespan1
m_Parameters[, "c_Trt_private"]            <- v_c_trt
m_Parameters[, "c_Trt_public"]             <- v_c_trt
m_Parameters[, "n_Trt"]                    <- input$n_Trt
m_Parameters[, "LOS_Trt"]                  <- input$LOS_Trt
m_Parameters[, "LOS_noTrt"]                <- input$LOS_noTrt
m_Parameters[, "d_c"]                      <- input$r_discount/100
m_Parameters[, "d_e"]                      <- input$r_discount/100
df_ce <- foreach::foreach(g = 1:input$n_iter, .combine = rbind) %dopar% {
l_param_psa <- as.list(m_Parameters[g, ])
l_param_psa <- c(l_param_psa, l_input_general) # Combine with the general input
# Run the model
l_out_temp <- calculate_cea_output_VOI_COVID(l_param_psa, n_wtp = l_param_psa$wtp, verbose = FALSE)
df_ce <- c(l_out_temp$Cost,
l_out_temp$Effect,
l_out_temp$LY,
l_out_temp$NMB,
l_out_temp$NHB)
}
# Save the output
m_output_par[, "Costs notrt"]   <- df_ce[, 1]
m_output_par[, "Costs trt"]     <- df_ce[, 2]
m_output_par[, "QALY notrt"]    <- df_ce[, 3]
m_output_par[, "QALY trt"]      <- df_ce[, 4]
m_output_par[, "LY notrt"]      <- df_ce[, 5]
m_output_par[, "LY trt"]        <- df_ce[, 6]
# Add storing the values of each iterations
m_C_psa[, "notrt"] <- m_output_par[, "Costs notrt"]
m_C_psa[, "trt"]   <- m_output_par[, "Costs trt"]
m_E_psa[, "notrt"] <- m_output_par[, "QALY notrt"]
m_E_psa[, "trt"]   <- m_output_par[, "QALY trt"]
}
stopCluster(cl)
})
# Do the CEA calculation
output$df_CEA_PSA <- renderTable({
df_cea_QALY_PSA <- calculate_icers(cost   =     colMeans(m_C_psa),
effect     = colMeans(m_E_psa),
strategies = l_out_temp$Strategy)
df_cea_QALY_PSA
df_cea_QALY_PSA %>% arrange(desc(Strategy))  # Have trt first row
})
output$plot_CE_PSA <- renderPlot({
plot_CE_PSA <- make_psa_obj(cost  = as.data.frame(m_C_psa),
effectiveness  = as.data.frame(m_E_psa),
parameters =m_Parameters[1:input$n_iter, ],
strategies = l_out_temp$Strategy)
plot(plot_CE_PSA) +
labs(title     = paste("Cost-effectiveness plane"),
subtitle   = paste("intervention vs control", sep = " ")) +
xlab("Effectiveness (in QALY)") +
ylab("Costs ($)") +
geom_vline(xintercept = 0, color = my_darkgray, size = 0.6) +
geom_hline(yintercept = 0, color = my_darkgray, size = 0.6) +
scale_color_manual(values = c(my_lightred, my_green, my_black)) +
scale_fill_manual(values = c(my_lightred, my_green, my_black))
})
})
# Trick file date creation update
onStop(function() {
# File name
p <- paste0(getwd(), "/app.R")
# Update file 'date creation'
Sys.setFileTime(p, now())
print("test")
}) # onStop
}
# Run the application
shinyApp(ui = ui, server = server)
remove.packages("cachem")
>>>>>>> Stashed changes
runApp()
