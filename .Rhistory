numericInput("c_Trt",
Slider2,
value = n_costs,
step = 1),
sliderInput("ci_c_Trt",
Slider2_1,
min = 0,
max = 1e6,
value = c(ci_costs),
step = 1),
numericInput("n_Trt",
Slider2_2,
value = n_Trt,
step = 1),
Tab_instr1,
sliderInput("LOS_Trt",
Slider3,
min = 0,
max = 73,
value = LOS_Trt,
step = 1),
sliderInput("LOS_noTrt",
Slider4,
min = 0,
max = 73,
value = LOS_noTrt,
step = 1),
sliderInput("p_IC",
Slider5,
min = 0,
max = 1,
value = 0.18,
step = 0.01)
),
tabPanel(title = Tab0_1,
Tab_instr2,
sliderInput("r_discount",
Slider5,
min = 0,
max = 10,
value = r_discount,
step = 0.5),
sliderInput("n_wtp",
Slider7,
min = 0,
max = 3*1e5,
step = 1e3,
value = n_wtp),
Tab_instr3,
sliderInput("n_iter",
Slider6,
min = 0,
max = 10000,
value = n_iter,
step = 50)
),
tabPanel(title = Tab0_2,
Tab_instr4,
numericInput(inputId = "n_H_current",
label = Population1,
value = n_H_current),
numericInput(inputId = "n_H_future",
label = Population0,
value = n_H_future),
actionButton("RunVOI", "Run VOI")
)
),
actionButton("RunPA", "Run PA")
),
mainPanel (
tabsetPanel(id = "outputs", type = "tabs",
# Display outputs
Main_Output1,
tabPanel(title = Tab0_3,
Documentation0,
Documentation1,
Documentation2,
Documentation2_1,
Documentation2_2,
Documentation3,
Documentation3_1,
Documentation4,
Documentation4_1,
Documentation5,
Documentation5_1,
Documentation6,
Documentation6_1,
Documentation7,
Documentation7_1,
Documentation8,
Documentation8_1,
Documentation9,
Documentation10,
Documentation11,
Documentation12,
Documentation13,
Documentation14,
Documentation14_1,
Documentation15,
Documentation15_1,
Documentation16,
Documentation16_1,
Documentation17,
Documentation17_1,
Documentation18,
Documentation18_1
),
tabPanel(title = "Disclaimer",
DocumentationDisclaimer1,
DocumentationDisclaimer2,
DocumentationDisclaimer3,
DocumentationDisclaimer4,
DocumentationDisclaimer5,
DocumentationDisclaimer6),
tabPanel(title = "Acknowledgement",
DocumentationAck1,
DocumentationAck2,
DocumentationAck3)
)
)
),
hr(),
License
)
load("output/l_m_Parameters.rda")
l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$p_IC
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$p_IC)
runApp()
runApp()
runApp()
fluidPage(
tags$head(
includeCSS("www/style_EK.css")
),
theme = shinytheme(theme = "sandstone"),
useShinyjs(),
withMathJax(),
h1(paste(title, sep =", "), .noWs ="outside"),
# Application title
Credits2,
Credits3,
Credits4,
br(),
Subtitle1,
Subtitle1.1,
hr(),
Instructions0,
Instructions1,
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tabsetPanel(id = "inputs",
type = "tabs",
tabPanel(title = Tab0_0,
Tab1_1,
Tab1_2,
numericInput("hr_D_Trt_timespan1",
Slider1,
value = n_eff_size,
step = 0.001),
sliderInput("Uncertainty around effect size",
Slider1_1,
min = 0,
max = 3,
value = c(ci_eff_size),
step = 0.001),
Tab1_3,
numericInput("c_Trt",
Slider2,
value = n_costs,
step = 1),
sliderInput("ci_c_Trt",
Slider2_1,
min = 0,
max = 1e6,
value = c(ci_costs),
step = 1),
numericInput("n_Trt",
Slider2_2,
value = n_Trt,
step = 1),
Tab_instr1,
sliderInput("LOS_Trt",
Slider3,
min = 0,
max = 73,
value = LOS_Trt,
step = 1),
sliderInput("LOS_noTrt",
Slider4,
min = 0,
max = 73,
value = LOS_noTrt,
step = 1),
Tab_instr1_1,
sliderInput("p_IC",
Slider4_1,
min = 0,
max = 1,
value = 0.165,
step = 0.01)
),
tabPanel(title = Tab0_1,
Tab_instr2,
sliderInput("r_discount",
Slider5,
min = 0,
max = 10,
value = r_discount,
step = 0.5),
sliderInput("n_wtp",
Slider7,
min = 0,
max = 3*1e5,
step = 1e3,
value = n_wtp),
Tab_instr3,
sliderInput("n_iter",
Slider6,
min = 0,
max = 10000,
value = n_iter,
step = 50)
),
tabPanel(titl = Tab0_1_1),
tabPanel(title = Tab0_2,
Tab_instr4,
numericInput(inputId = "n_H_current",
label = Population1,
value = n_H_current),
Population1_1,
numericInput(inputId = "n_H_future",
label = Population0,
value = n_H_future),
Population0_1,
actionButton("RunVOI", "Run VOI")
)
),
actionButton("RunPA", "Run PA")
),
mainPanel (
tabsetPanel(id = "outputs", type = "tabs",
# Display outputs
Main_Output1,
tabPanel(title = Tab0_3,
Documentation0,
Documentation1,
Documentation2,
Documentation2_1,
Documentation2_2,
Documentation3,
Documentation3_1,
Documentation4,
Documentation4_1,
Documentation5,
Documentation5_1,
Documentation6,
Documentation6_1,
Documentation7,
Documentation7_1,
Documentation8,
Documentation8_1,
Documentation9,
Documentation10,
Documentation11,
Documentation12,
Documentation13,
Documentation14,
Documentation14_1,
Documentation15,
Documentation15_1,
Documentation16,
Documentation16_1,
Documentation17,
Documentation17_1,
Documentation18,
Documentation18_1
),
tabPanel(title = "Disclaimer",
DocumentationDisclaimer1,
DocumentationDisclaimer2,
DocumentationDisclaimer3,
DocumentationDisclaimer4,
DocumentationDisclaimer5,
DocumentationDisclaimer6),
tabPanel(title = "Acknowledgement",
DocumentationAck1,
DocumentationAck2,
DocumentationAck3)
)
)
),
hr(),
License
)
runApp()
l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_H
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_H)
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_I)
mean(l_m_Parameters$`Baricitinib-Remdesivir_2020-12-11`$u_IC)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinybusy")
add_busy_bar(color = "#ee8472", height = "8px")
library(shinybusy)
add_busy_bar(color = "#ee8472")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
beta_params(mean = mean, sigma = SE)
n <- 17698
mean <- 0.88
SE <- 0.0015
median <- 1
beta_params(mean = mean, sigma = SE)
alpha <- beta_params(mean = mean, sigma = SE)$alpha
alpha
alpha
beta <- beta_params(mean = mean, sigma = SE)$beta
alpha <- beta_params(mean = mean, sigma = SE)$alpha
beta <- beta_params(mean = mean, sigma = SE)$beta
mean(rbeta(n = 1e4, shape1 = alpha, shape2 = beta))
curve(dbeta(x, alpha, beta))
curve(dbeta(n, alpha, beta))
n <- 17698
mean <- 0.88
SE <- 0.0015
median <- 1
beta_params(mean = mean, sigma = SE)
alpha <- beta_params(mean = mean, sigma = SE)$alpha
beta <- beta_params(mean = mean, sigma = SE)$beta
mean(rbeta(n = 1e4, shape1 = alpha, shape2 = beta))
curve(dbeta(n, alpha, beta))
curve(dbeta(x, alpha, beta))
library(dampack)
n_iter <- 10000
# This function requires an alpha and beta, but we give it CI levels
# Current information in the excel sheet
# U_healthy
u_H_mean <- 0.5
u_H_Lo_alpha <- 0.23
u_H_Hi_beta  <- 0.88
v_u_H <- rbeta(n = n_iter,
shape1 = u_H_Lo_alpha,
shape2 = u_H_Hi_beta)
hist(v_u_H)
mean(v_u_H)
u_RH_mean <- 0.880
u_RH_Lo_alpha <- 0.877
u_RH_Hi_beta  <- 0.883
v_u_RH <- rbeta(n = n_iter,
shape1 = u_RH_Lo_alpha,
shape2 = u_RH_Hi_beta)
hist(v_u_RH)
mean(v_u_RH) # Veel te laag, compared to mean
u_RIC_mean <- 0.677
u_RIC_SD <- 0.301
beta_params(u_RIC_mean, u_RIC_SD)
u_RH_SD <- 0.0015
beta_params(u_RH_mean, u_RH_SD)
v_u_RH_a <- rbeta(n = n_iter,
shape1 = beta_params(u_RH_mean, u_RH_SD)$alpha,
shape2 = beta_params(u_RH_mean, u_RH_SD)$beta)
hist(v_u_RH_a)
mean(v_u_RH_a) #
u_RH_mean <- 0.880
u_RH_Lo_alpha <- 0.877
u_RH_Hi_beta  <- 0.883
v_u_RH <- rbeta(n = n_iter,
shape1 = u_RH_Lo_alpha,
shape2 = u_RH_Hi_beta)
hist(v_u_RH)
mean(v_u_RH) # Veel te laag, compared to mean
dampack
dampack::beta_params
beta_params(u_RH_mean, u_RH_SD)
u_RH_mean <- 0.880
u_RH_Lo_alpha <- 0.877
u_RH_Hi_beta  <- 0.883
v_u_RH <- rbeta(n = n_iter,
shape1 = u_RH_Lo_alpha,
shape2 = u_RH_Hi_beta)
hist(v_u_RH)
mean(v_u_RH) # Veel te laag, compared to mean
# Data paper:
# 0.880	0.0015
u_RH_SD <- 0.0015
beta_params(u_RH_mean, u_RH_SD)
u_RIC_mean <- 0.677
u_RIC_SD <- 0.301
beta_params(u_RIC_mean, u_RIC_SD)
# NOTE: Getallen omgedraaid!!!
# Daar zit een fout! Alpha moet het hoge getal zijn en beta het lage!
# TO DO: Update the excel data!!!
u_RIC_Lo_alpha <- 0.4565801
u_RIC_Hi_beta  <- 0.9569805
v_u_RIC <- rbeta(n = n_iter,
shape1 = u_RIC_Lo_alpha,
shape2 = u_RIC_Hi_beta)
hist(v_u_RIC)
mean(v_u_RIC)
# Data paper:
# 0.880	0.0015
u_RH_SD <- 0.0015
beta_params(u_RH_mean, u_RH_SD)
v_u_RH_a <- rbeta(n = n_iter,
shape1 = beta_params(u_RH_mean, u_RH_SD)$alpha,
shape2 = beta_params(u_RH_mean, u_RH_SD)$beta)
hist(v_u_RH_a)
mean(v_u_RH_a) # Veel te laag, compared to mean = much better mean! and dist
#u_R_H
u_RH_mean <- 0.880
# Data paper:
# 0.880	0.0015
u_RH_SD <- 0.0015
u_RH_mean
u_RH_SD
a
beta_params(u_RH_mean, u_RH_SD)
u_RIC_mean <- 0.677
u_RIC_SD <- 0.301
beta_params(u_RIC_mean, u_RIC_SD)
beta_params(u_RH_mean, u_RH_SD)
v_u_RH_a <- rbeta(n = n_iter,
shape1 = beta_params(u_RH_mean, u_RH_SD)$alpha,
shape2 = beta_params(u_RH_mean, u_RH_SD)$beta)
hist(v_u_RH_a)
mean(v_u_RH_a) # Veel te laag, compared to mean = much better mean! and dist
shiny::runApp()
runApp()
u_R_IC
u_R_IC
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
l_out_evpi_QALY$EVPI[l_out_evpi_QALY$WTP == 100000]
runApp()
runApp()
runApp()
Main_Output1 =  tabPanel( title = "Results",
br(),
h3(strong("With this therapy:")),
h4(strong("Basecase values:")),
h5("Cost = US dollar, Effect = QALY, LY = Life years, NMB: Net monetary benefit for QALYs, NHB: Net health benefit for QALYs, NMB_LY: Net monetary benefit for LYs, NHB_LY: Net health benefit for LYs"),
tableOutput("df_basecase"),
h4(strong("Basecase cost-effectiveness results:")),
h5("Effect = QALY and Cost = US dollar"),
tableOutput("df_CEA_basecase"),
h5("Lengend: trt: treatment, notrt: no treatment, Inc_Cost: Incremental costs, Inc:Effect: Incremental effects in QALY, QALY:Quality adjusted life years, ICER: Incremental cost effectivenes ratio, ND: no-dominated, D:dominated, ED: extended dominated"),
h4(strong("PA cost-effectiveness results:")),
p("Click the [Run PA] button to see the (changes in the) probabilistic analysis results. Please note that this simulation takes some time."),
plotOutput("plot_CE_PSA"),
p(""),
tableOutput("df_CEA_PSA"),
h4(strong("Expected net benefit results:")),
textOutput("text"),
p("Click the [Run VOI] button to see (changes in the) VOI results. Please note that this simulation takes some time.")
)
License = h6("This software is licensed via the GNU General Public License 3.0.")
runApp()
runApp()
runApp()
runApp()
View(m_C_psa)
View(m_E_psa)
v_wtp <- seq(0, 3 * 1e5, 1e3)
l_pop <- input$n_H_current * mean(m_Parameters[, "p_IC_notrt"])
m_Parameters[, "p_IC_notrt"]
mean(m_Parameters[, "p_IC_notrt"]
mean(m_Parameters[, "p_IC_notrt"])
l_pop <-  1090* mean(m_Parameters[, "p_IC_notrt"])
l_pop
m_E_psa
v_wtp
m_E_psa
?seq
v_wtp <- seq(0, 3 * 1e5, length = input$n_iter)
seq
v_wtp <- seq(0, 3 * 1e5, length.out = input$n_iter)
v_wtp <- seq(0, 3 * 1e5, length.out = 100)
v_wtp
runApp()
evpi(v.wtp = v_wtp,
m.e   = m_E_psa,
m.c   = m_C_psa,
pop   = l_pop)
m_E_psa
m_E_psa
v_wtp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(m_C_psa)
runApp()
shiny::runApp()
runApp()
